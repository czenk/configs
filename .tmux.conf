# Modeline and Intro {{
# vim: set sw=4 et ts=4 sts=4 ai nowrap nojs foldmarker={{,}} foldlevel=0 foldmethod=marker:
# }}
# {{ Global Prefix (Default: CTRL-b)

    # 21/10/2015 - New attempt:
    set-option -g prefix C-a
    # <CTRL>-a a command - send command to nested tmux session
    bind-key a send-prefix

#    # change Control key from <CTRL>-<B> to <CTRL>-<A>
#    set -g prefix C-a
#    unbind C-b
#    bind C-a send-prefix

# }}
# {{ TERM, General Configuration,Appearance

    set -g default-terminal "screen-256color"
    #set -g default-terminal "xterm-256color"

    # set scrollback history to 10000 (10k)
    set -g history-limit 10000

    # Start windows an panes at 1, not 0
    set -g base-index 1
    set -g pane-base-index 1

    ## Set status bar
    #set -g status-bg black
    #set -g status-fg white
    ## Highlight active window
    #set-window-option -g window-status-current-bg red

    # ----------------------
    # set some pretty colors
    # ----------------------
    # set pane colors - hilight the active pane
    set-option -g pane-border-fg colour235 #base02
    set-option -g pane-active-border-fg colour240 #base01

    # colorize messages in the command line
    set-option -g message-bg black #base02
    set-option -g message-fg brightred #orange

    # ----------------------
    # Status Bar
    # -----------------------
    set-option -g status on                # turn the status bar on
#    set -g status-utf8 on                  # set utf-8 for the status bar
    set -g status-interval 5               # set update frequencey (default 15 seconds)
    set -g status-justify centre           # center window list for clarity
    # set-option -g status-position top    # position the status bar at top of screen

    # visual notification of activity in other windows
    setw -g monitor-activity on
    set -g visual-activity on

    # set color for status bar
    set-option -g status-bg colour235 #base02
    set-option -g status-fg yellow #yellow
    set-option -g status-attr dim 

    # set window list colors - red for active and cyan for inactive
    set-window-option -g window-status-fg brightblue #base0
    set-window-option -g window-status-bg colour236 
    set-window-option -g window-status-attr dim

    set-window-option -g window-status-current-fg brightred #orange
    set-window-option -g window-status-current-bg colour236
    set-window-option -g window-status-current-attr bright

    # show host name and IP address on left side of status bar
    set -g status-left-length 70
    #set -g status-left "#[fg=green]: #h : #[fg=brightblue]#(curl icanhazip.com) #[fg=yellow]#(ifconfig en0 | grep 'inet ' | awk '{print \"en0 \" $2}') #(ifconfig en1 | grep 'inet ' | awk '{print \"en1 \" $2}') #[fg=red]#(ifconfig tun0 | grep 'inet ' | awk '{print \"vpn \" $2}') "
    set -g status-left "#[fg=green]: #h : #[fg=yellow]#(ifconfig eth0 | grep 'inet ' | awk '{print \"eth0 \" $2}') #(ifconfig eth1 | grep 'inet ' | awk '{print \"eth1 \" $2}') #[fg=red]#(ifconfig tun0 | grep 'inet ' | awk '{print \"vpn \" $2}') "

    # show session name, window & pane number, date and time on right side of
    # status bar
    set -g status-right-length 60
    set -g status-right "#[fg=blue]#S #I:#P #[fg=yellow]:: %d %b %Y #[fg=green]:: %l:%M %p :: #(date -u | awk '{print $4}')::"

# }}

# Set VI mode
# 'Leader': enters vi mode, i.e. <CTRL>-<B>:
# Verify with 'Leader' :list-keys -t vi-copy
set-window-option -g mode-keys vi

# --- VI like Copy and Paste ---
# Replace [ with <ESC> to switch to copy mode
unbind [
bind Escape copy-mode
# Rebind p to paste copied text
unbind p
bind p paste-buffer

# Bind VI like selection visual selection and copy
bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-selection


# reload ~/.tmux.conf using PREFIX r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# Create Panes 
bind-key 'h' split-window
bind-key 'v' split-window -h 

# {{ VIM/Tmux-integration

    # 01/10/2015 CZ: vim/tmux integration
    # Introduces two different options two switch between splits
    # and one option to resize splits
    
    # 1. Just mimicing the default pane switching behaviour 
    # from Vim so that I have
    # Vim: <CTRL>-W-<Arrow Key> 
    # Tmux: <CTRL>-<Arrow key>
    # Switch tmux-panes via <prefx> - <Arrow Key>
    bind C-Left select-pane -L
    bind C-Down select-pane -D
    bind C-Up select-pane -U
    bind C-Right select-pane -R

    # VIM - Integration 
    # Requires <https://github.com/christoomey/vim-tmux-navigator>
    # Making <CTRL> - h|j|k|l work to transparently switch panes
    # from <https://github.com/christoomey/vim-tmux-navigator>
    # Smart pane switching with awareness of vim splits
    is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
     bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
     bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
     bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
     bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
     bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
    # restore overwritten C-l binding (clear screen)
     bind C-l send-keys 'C-l'

    # from me...
    # Making <CTRL> - <Arrow> work to resize panes
    # Bind and forward resize events - seems like
    # CTRL-<Arrow> sequences cannot be reliably forwarded to Vim
      bind -n C-Left if-shell "$is_vim" "send-keys C-@" "resize-pane -L"
      bind -n C-Down if-shell "$is_vim" "send-keys C-m" "resize-pane -D"
      bind -n C-Up if-shell "$is_vim" "send-keys C-n" "resize-pane -U"
      bind -n C-Right if-shell "$is_vim" "send-keys C-_" "resize-pane -R"

# }}

